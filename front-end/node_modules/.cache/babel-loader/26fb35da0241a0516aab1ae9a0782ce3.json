{"ast":null,"code":"import { css, setup } from 'goober';\nimport React, { useState, useEffect } from 'react';\n/**\n * A minimal utility to combine classes\n *\n * @export\n * @param {(string[] | string)} obj\n * @returns {string}\n */\n\nfunction cc() {\n  for (var _len = arguments.length, obj = new Array(_len), _key = 0; _key < _len; _key++) {\n    obj[_key] = arguments[_key];\n  }\n\n  return obj.join(\" \");\n}\n\nvar tagStyles = /*#__PURE__*/css({\n  alignItems: \"center\",\n  background: \"var(--rti-tag)\",\n  borderRadius: \"var(--rti-radius)\",\n  display: \"inline-flex\",\n  justifyContent: \"center\",\n  paddingLeft: \"var(--rti-s)\",\n  button: {\n    background: \"none\",\n    border: 0,\n    borderRadius: \"50%\",\n    cursor: \"pointer\",\n    lineHeight: \"inherit\",\n    padding: \"0 var(--rti-s)\",\n    \"&:hover\": {\n      color: \"var(--rti-tag-remove)\"\n    }\n  }\n});\n\nfunction Tag(_ref) {\n  var text = _ref.text,\n      remove = _ref.remove;\n\n  var handleOnRemove = function handleOnRemove(e) {\n    e.stopPropagation();\n    remove(text);\n  };\n\n  return React.createElement(\"span\", {\n    className: cc(\"rti--tag\", tagStyles)\n  }, React.createElement(\"span\", null, text), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleOnRemove,\n    \"aria-label\": \"remove \" + text\n  }, \"\\u2715\"));\n}\n\nsetup(React.createElement);\nvar RTIContainer = /*#__PURE__*/css({\n  \"--rtiBg\": \"#fff\",\n  \"--rtiBorder\": \"#ccc\",\n  \"--rtiMain\": \"#3182ce\",\n  \"--rtiRadius\": \"0.375rem\",\n  \"--rtiS\": \"0.5rem\",\n  \"--rtiTag\": \"#edf2f7\",\n  \"--rtiTagRemove\": \"#e53e3e\",\n  \"*\": {\n    boxSizing: \"border-box\",\n    transition: \"all 0.2s ease\"\n  },\n  alignItems: \"center\",\n  bg: \"var(--rti-bg)\",\n  border: \"1px solid var(--rti-border)\",\n  borderRadius: \"var(--rti-radius)\",\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  gap: \"var(--rti-s)\",\n  lineHeight: 1.4,\n  padding: \"var(--rti-s)\",\n  \"&:focus-within\": {\n    borderColor: \"var(--rti-main)\",\n    boxShadow: \"var(--rti-main) 0px 0px 0px 1px\"\n  }\n});\nvar RTIInput = /*#__PURE__*/css({\n  border: 0,\n  outline: 0,\n  fontSize: \"inherit\",\n  lineHeight: \"inherit\",\n  width: \"50%\"\n});\nvar defaultSeprators = [\"Enter\"];\n\nvar TagsInput = function TagsInput(_ref) {\n  var name = _ref.name,\n      placeHolder = _ref.placeHolder,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      seprators = _ref.seprators,\n      onExisting = _ref.onExisting,\n      onRemoved = _ref.onRemoved;\n\n  var _useState = useState(value || []),\n      tags = _useState[0],\n      setTags = _useState[1];\n\n  useEffect(function () {\n    onChange && onChange(tags);\n  }, [tags]);\n\n  var handleOnKeyUp = function handleOnKeyUp(e) {\n    e.stopPropagation();\n    var text = e.target.value;\n\n    if (e.key === \"Backspace\" && tags.length && !text) {\n      setTags(tags.slice(0, -1));\n    }\n\n    if (text && (seprators || defaultSeprators).includes(e.key)) {\n      if (tags.includes(text)) {\n        onExisting && onExisting(text);\n        return;\n      }\n\n      setTags([].concat(tags, [text]));\n      e.target.value = \"\";\n      e.preventDefault();\n    }\n  };\n\n  var onTagRemove = function onTagRemove(text) {\n    setTags(tags.filter(function (tag) {\n      return tag !== text;\n    }));\n    onRemoved && onRemoved(text);\n  };\n\n  return React.createElement(\"div\", {\n    \"aria-labelledby\": name,\n    className: cc(\"rti--container\", RTIContainer)\n  }, tags.map(function (tag) {\n    return React.createElement(Tag, {\n      key: tag,\n      text: tag,\n      remove: onTagRemove\n    });\n  }), React.createElement(\"input\", {\n    className: cc(\"rti--input\", RTIInput),\n    type: \"text\",\n    name: name,\n    placeholder: placeHolder,\n    onKeyDown: handleOnKeyUp,\n    onBlur: onBlur\n  }));\n};\n\nexport { TagsInput };","map":null,"metadata":{},"sourceType":"module"}